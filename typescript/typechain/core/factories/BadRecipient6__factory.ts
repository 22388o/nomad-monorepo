/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadRecipient6, BadRecipient6Interface } from "../BadRecipient6";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "handle",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610122806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ab2dc3f514602d575b600080fd5b60ea60048036036080811015604157600080fd5b63ffffffff823581169260208101359091169160408201359190810190608081016060820135640100000000811115607857600080fd5b820183602082011115608957600080fd5b8035906020019184600183028401116401000000008311171560aa57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506028945050505050565b00fea26469706673582212205786b29859d4bc90091a9b09db9374352391980ae7285ae172dd56b031e5532b64736f6c63430007060033";

export class BadRecipient6__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadRecipient6> {
    return super.deploy(overrides || {}) as Promise<BadRecipient6>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadRecipient6 {
    return super.attach(address) as BadRecipient6;
  }
  connect(signer: Signer): BadRecipient6__factory {
    return super.connect(signer) as BadRecipient6__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadRecipient6Interface {
    return new utils.Interface(_abi) as BadRecipient6Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadRecipient6 {
    return new Contract(address, _abi, signerOrProvider) as BadRecipient6;
  }
}
